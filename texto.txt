git config --global user.name "Delson Pilar"
-- Configurando o nome de usuário global

git config --global user.email "dubalpilardelson@gmail.com"
-- configurando o e-mail

touch index.html style.css scripts.js
-- criando arquivos na pasta. Neste caso, cria-se um arquivo js um css e um html. 

$ git init
Initialized empty Git repository in C:/Users/Delson/Desktop/teste/.git/
-- inicializando um repositório

git clone https://github.com/Delson16/projetoGit.git
-- fazendo o dowload do projeto na internet e o adicionando localmente

$ git add .
-- colocando arquivos dentro do estage (preparando eles pare serem comitados)
-- Ponto é paremtro global e adiciona todos os arquivos modificados pare o stage, mas pode-se adicionar o nome de u-- m arquivo desejado adicionando apenas ele a esta eatapa
-- pode por *.css (adiciona todoas arquivos com esta extensão)
-- pode por -A para atualizar apenas quem ainda não entrou no stage

git reset index.html
-- remove um arquivo do stage

git restore index.html 
-- restaura um arquivo colocando no seu ultimo estado do stage

$ git commit -m "primeiro commit"
-- realizando o commit. Passou-se o parametro m para passar um recado junto ao commit. Titulo. 

$ git commit -a -m "atualizando tudo de uma vez"
-- Simplificando etapas. Realiza a adição ao estage e logo em seguida realiza o comiit.
-- ATENÇÃO: Este comando adiciona tudo que foi alterado para o satge. Cuidar para não enviar um arquivo que não devia ou que não faça sentido com o projeto

logs e histórico
$ git log
-- mostra o histórico de atualizações com outros commits realizados.

$ git log --author="Delson" 
-- filtrando por autor

$ git log --oneline -5 --graph
-- mostra os commit em uma linha apenas
-- o -5 pega apenas os ultimos 5 commits para exibir
-- o graph mostra de forma grafica as branchs em desenvolvimento

$ git log main 
-- vendo o histórico da branch main

$ git shortlog -sn
-- versão mais curta do log 
-- sn é opcional e mostra a quantridade de alterações realizada por cada autor

$ git reflog
-- mostra as utimas alterações realizadas com o git, nãom apenas os commmits (exemplo: troca de computador ou push dados)

BRANCHS 

-- São ramificações para o repositório. Trata-se de uma cópia paralela do proeto para trabalhar de forma independente para não afetas a linha principal de desenvolvimento, sendo assim, cada linha pode ter seus commits e desenvolvimento paralelo antes da união deles.

-- o comando merge mescla o branch secundário com o principal depois de o desevvolvimento da secundária estar pronta 

$ git branch
-- este comando exibe as branches existentes

$ git branch parametro
-- podemos colocar qualquer palavra no lugar de parametro e uma branch com aquele nome será criada, se separando da principal

$ git branch -D parametro
-- forma de excluir a branch criada

$ git checkout -b parametro
-- criamos a branch nova e já entramos nela 

$ git branch -m parametro
-- escrevemos no parametro um nome para reescrever o nome atual da branch atual

$ git remote add origin https://github.com/Delson16/aprendendoGit.git
-- vinculando o git local com um remoto para os comando de push e pull

$ git remote -v 
-- exibe os links que usamso para acessar o repositório remoto

$ git push -u origin dev
-- enviando os arquivos para o git remoto 


Delson@DESKTOP-G15NUN9 MINGW64 ~/Desktop/teste (dev)
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/Delson16/aprendendoGit.git
  Push  URL: https://github.com/Delson16/aprendendoGit.git
  HEAD branch: dev
  Remote branches:
    dev    tracked
    master tracked
  Local branches configured for 'git pull':
    dev    merges with remote dev
    master merges with remote master
  Local refs configured for 'git push':
    dev    pushes to dev    (fast-forwardable)
    master pushes to master (up to date)

-- comando mostra informações sobre o link do repositório remoto, além das brnches usadas

$ git merge dev
-- realiazo o merge. Como não ouve congflitos o git simplismente adicionou as linhas novas a versão mais resente do master 

-- havendo conflitos você deverá ajusta-los pelo editor e em caso de querer desfazer o commit deve-se usar o comando abort
$ git merge --abort
-- caso decida proseguir, ajeite os conflitos no editor e depois passe o comando
$ git merge --continue
-- assim o git continuará o merge

